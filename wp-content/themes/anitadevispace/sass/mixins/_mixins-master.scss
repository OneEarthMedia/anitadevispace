/* ONE EARTH MEDIA -- MIXINS */
/* ************************* */

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 10) * 1px;
	font-size: $sizeValue * 0.625rem;
}

// Border-radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

// Transition
@mixin transition($property, $duration, $easing) {
    -webkit-transition: $property $duration $easing;
    -moz-transition: $property $duration $easing;
    -ms-transition: $property $duration $easing;
    -o-transition: $property $duration $easing;
    transition: $property $duration $easing;
}

// Transition all
@mixin transition-all($length) {
    -webkit-transition: all $length ease;
    -moz-transition: all $length ease;
    -ms-transition: all $length ease;
    -o-transition: all $length ease;
    transition: all $length ease;
}

// Animation duration
@mixin animate-for($length) {
    animation-duration: $length;
    -webkit-animation-duration: $length;
    -moz-animation-duration: $length;
    -ms-animation-duration: $length;
}

// String link style
@mixin strip-link($new-color) {
    text-decoration: none;
    color: $new-color !important;
}

// Transforms
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

// Mobile Responsive queries
@mixin respond-to($media) {
    @if $media == small-mobile {
        @media only screen and (max-width: $break__XS) { @content; }
    }
    @else if $media == large-mobile {
        @media only screen and (max-width: $break__S) { @content; }
    }
    @else if $media == tablet {
        @media only screen and (max-width: $break__M) { @content; }
    }
    @else if $media == small-screen {
        @media only screen and (max-width: $break__L) { @content; }
    }
    @else if $media == laptop {
        @media only screen and (max-width: $break__XL) { @content; }
    }    
    @else {
        @media only screen and (max-width: $media) { @content; }
    }
}

// Font-Face
@mixin font-face($font-family, $file-path, $font-weight) {
  @font-face {
    font-family: $font-family;
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
           url('#{$file-path}.woff') format('woff'),
           url('#{$file-path}.ttf') format('truetype');
           // url('#{$file-path}.svg##{$font-family}') format('svg');
    font-weight: $font-weight;
  }
    
  // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
  /*
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    @font-face {
      font-family: $font-family;
        src: url('#{$file-path}.svg##{$font-family}') format('svg');
    }
  }
  */
}

// Text-style
@mixin text-style($style) {
    @if $style == light {
        font-weight: 300;
        
        :lang(ar) & {
            font-family: $font__arab;
        }
    }
    @else if $style == regular {
        font-weight: 400;
        
        :lang(ar) & {
            font-family: $font__arab;
        }        
    }
    @else if $style == medium {
        font-weight: 600;
        
        :lang(ar) & {
            font-family: $font__arab;
        }        
    }
    @else if $style == semibold {
        font-weight: 700;
        
        :lang(ar) & {
            font-family: 'HelveticaWorld-Bold', Helvetica, Arial, sans-serif;
            // font-family: $font__arab;
        }        
    }    
    @else if $style == bold {
        font-weight: 800;
        
        :lang(ar) & {
            font-family: 'HelveticaWorld-Bold', Helvetica, Arial, sans-serif;
            // font-family: $font__arab;
        }        
    }    
}

// Flexbox Mixins

@mixin display-flex {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

@mixin flex ($grow: 0, $shrink: 1, $basis: auto) {
    -webkit-flex: $grow $shrink $basis;
    -ms-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
}

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

/* Admin bar & fixed header fix
/* https://www.sitepoint.com/getting-sticky-headers-wordpress-admin-bar-behave/ */
/* **************************************************************************** */

@mixin admin-sticky-fix( $offset: 0 ) {
  $narrow-offset: 46px;
  $wide-offset: 32px;
  @if $offset != 0 and type-of($offset) == 'number' {
    $narrow-offset: $narrow-offset + $offset;
    $wide-offset: $wide-offset + $offset;
  }
  .admin-bar & {
    top: $narrow-offset;
    @media screen and (min-width: 783px) {
      top: $wide-offset;
    }
  }
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}
